// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL") // ในไฟล์ .env ต้องมี Connection String ของ Supabase
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String      @id @default(dbgenerated("uuid_generate_v4()"))
  name         String
  email        String?     @unique
  google_id    String?     @unique
  avatar_url   String?
  last_login   DateTime?
  created_at   DateTime?   @default(now())

  // ความสัมพันธ์:
  transactions Transaction[]
  receipts     Receipt[]
}

model Category {
  id    String @id @default(dbgenerated("uuid_generate_v4()"))
  name  String
  type  String   // 'income' | 'expense'
  icon  String?
  color String?
}

model Transaction {
  id             String    @id @default(dbgenerated("uuid_generate_v4()"))
  user_id        String
  amount         Decimal   @db.Decimal(10, 2)
  type           String
  category       String
  description    String?
  date           DateTime? @default(now())
  created_at     DateTime? @default(now())
  receipt_images String[]  @db.Text // ตัวแปร Array ใน PostgreSQL
  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  receipts  Receipt[] // ผูกกับ receipts
}


model Receipt {
  id             String    @id @default(dbgenerated("uuid_generate_v4()"))
  transaction_id String?
  user_id        String
  image_url      String
  amount         Decimal   @db.Decimal(10, 2)
  merchant       String?
  date           DateTime?
  tax_id         String?
  items          Json?     // เก็บ JSONB ใน DB
  details        String?
  confidence     Decimal?  @db.Decimal(5, 4)
  created_at     DateTime? @default(now())

  // ความสัมพันธ์:
  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  transaction  Transaction? @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
}
